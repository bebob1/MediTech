<%- include('partials/header') %>

<div class="container">
  <div class="back-link">
    <a href="/dashboard">&larr; Volver al Dashboard</a>
  </div>
  
  <h1>Detalle de Diagnóstico</h1>
  
  <div class="diagnostico-header">
    <div class="equipo-image">
        <img src="<%= equipo.imagen || '/img/equipos/default.png' %>" alt="<%= equipo.nombre %>">
    </div>
    <div class="diagnostico-info">
      <h2><%= diagnostico.equipo_nombre %></h2>
      <p><strong>Fecha:</strong> <%= new Date(diagnostico.fecha).toLocaleDateString('es-ES') %></p>
      <p><strong>Hora:</strong> <%= new Date(diagnostico.fecha).toLocaleTimeString('es-ES', {hour: '2-digit', minute: '2-digit'}) %></p>
      <p><strong>Usuario:</strong> <%= diagnostico.usuario_nombre %></p>
    </div>
  </div>
  
  <div class="card">
    <h3>Diagnóstico Final</h3>
    <div class="diagnostico-box" id="diagnostico-contenido">
      <!-- El diagnóstico será reemplazado por JavaScript para mostrar una versión formateada -->
      <%= diagnostico.diagnostico %>
    </div>
  </div>
  
  <!-- Sección de Respuestas del Cuestionario con paginador -->
  <div class="card mb-4">
    <div class="card-header">
      <h5 class="mb-0">Respuestas del Cuestionario</h5>
    </div>
    <div class="card-body">
      <% if (diagnostico.respuestasArray && diagnostico.respuestasArray.length > 0) { %>
        <!-- Navegación de preguntas -->
        <div class="preguntas-nav mb-3">
          <% diagnostico.respuestasArray.forEach((respuesta, index) => { %>
            <button 
              class="btn-pregunta <%= index === 0 ? 'active' : '' %>" 
              data-index="<%= index %>">
              <%= index + 1 %>
            </button>
          <% }); %>
        </div>
        
        <!-- Contenedor de respuestas -->
        <div class="respuestas-container">
          <% diagnostico.respuestasArray.forEach((respuesta, index) => { %>
            <div class="respuesta-item <%= index === 0 ? 'active' : '' %>" data-index="<%= index %>">
              <p class="fw-bold mb-2">Pregunta <%= index + 1 %>: <%= respuesta.pregunta || 'Sin pregunta' %></p>
              <p class="mb-3">Respuesta: <%= respuesta.respuesta || 'Sin respuesta' %></p>
            </div>
          <% }); %>
        </div>
        
        <!-- Navegación anterior/siguiente -->
        <div class="navegacion-preguntas mt-3">
          <button class="btn btn-sm btn-outline-secondary" id="prevQuestion" <%= diagnostico.respuestasArray.length <= 1 ? 'disabled' : '' %>>Anterior</button>
          <span id="paginaActual">1 de <%= diagnostico.respuestasArray.length %></span>
          <button class="btn btn-sm btn-outline-secondary" id="nextQuestion" <%= diagnostico.respuestasArray.length <= 1 ? 'disabled' : '' %>>Siguiente</button>
        </div>
      <% } else { %>
        <p class="text-danger">No se pudieron cargar las respuestas. El formato puede ser incorrecto o no hay respuestas registradas.</p>
      <% } %>
    </div>
  </div>
  
  <% if (diagnostico.notas) { %>
  <div class="card">
    <h3>Notas Adicionales</h3>
    <div class="notas-box">
      <%= diagnostico.notas %>
    </div>
  </div>
  <% } %>
  
  <div class="actions">
    <% if (esAdmin) { %>
      <a href="/editar-diagnostico/<%= diagnostico.id %>" class="btn btn-secondary">Editar Diagnóstico</a>
    <% } %>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Variables para la paginación de preguntas
    const respuestaItems = document.querySelectorAll('.respuesta-item');
    const btnPreguntas = document.querySelectorAll('.btn-pregunta');
    const btnPrev = document.getElementById('prevQuestion');
    const btnNext = document.getElementById('nextQuestion');
    const paginaActual = document.getElementById('paginaActual');
    let currentIndex = 0;
    const totalPreguntas = respuestaItems.length;
    
    // Función para mostrar una pregunta específica
    function mostrarPregunta(index) {
      // Ocultar todas las respuestas
      respuestaItems.forEach(item => {
        item.classList.remove('active');
      });
      
      // Quitar la clase activa de todos los botones
      btnPreguntas.forEach(btn => {
        btn.classList.remove('active');
      });
      
      // Mostrar la respuesta actual
      respuestaItems[index].classList.add('active');
      btnPreguntas[index].classList.add('active');
      
      // Actualizar el contador
      paginaActual.textContent = `${index + 1} de ${totalPreguntas}`;
      
      // Actualizar el índice actual
      currentIndex = index;
      
      // Actualizar estado de los botones de navegación
      btnPrev.disabled = currentIndex === 0;
      btnNext.disabled = currentIndex === totalPreguntas - 1;
    }
    
    // Event listeners para los botones de las preguntas
    btnPreguntas.forEach(btn => {
      btn.addEventListener('click', function() {
        const index = parseInt(this.getAttribute('data-index'));
        mostrarPregunta(index);
      });
    });
    
    // Event listeners para botones anterior/siguiente
    btnPrev.addEventListener('click', function() {
      if (currentIndex > 0) {
        mostrarPregunta(currentIndex - 1);
      }
    });
    
    btnNext.addEventListener('click', function() {
      if (currentIndex < totalPreguntas - 1) {
        mostrarPregunta(currentIndex + 1);
      }
    });
    
    // Inicializar en la primera pregunta
    mostrarPregunta(0);
    
    // Formatear el diagnóstico para mostrar cada falla con sus verificaciones
    function formatearDiagnostico() {
      const diagnosticoBox = document.getElementById('diagnostico-contenido');
      const contenidoDiagnostico = diagnosticoBox.innerHTML.trim();
      
      // Verificar si el texto contiene la estructura de diagnóstico bayesiano
      if (contenidoDiagnostico.includes('se han identificado las siguientes posibles fallas')) {
        try {
          // Extraer las líneas con fallas y sus porcentajes
          const fallas = [];
          const lineasDiagnostico = contenidoDiagnostico.split('\n');
          
          // Buscar líneas numeradas con porcentajes
          const patronFalla = /^\d+\.\s+([^:]+):\s+(\d+\.\d+)%$/;
          
          // Definir mapeo completo de fallas a verificaciones basado en el árbol de decisiones
          const verificacionesPorFalla = {
            // Electrocardiógrafo (ECG)
            'Filtros mal configurados': [
              'Comprobar las configuraciones de filtro de línea base, muscular y de red',
              'Solución: Configurar bien los filtros'
            ],
            'Interferencia en la señal': [
              'Verificar si el paciente está en contacto con algún elemento metálico',
              'Solución: Aislar al paciente de todo elemento metálico',
              'Verificar si se depiló la zona de contacto',
              'Solución: Depilar la zona de contacto',
              'Verificar que los electrodos estén bien colocados',
              'Solución: Colocar bien los electrodos',
              'Verificar si hay defecto en el cable',
              'Solución: Reemplazar el cable defectuoso'
            ],
            'Cable defectuoso': [
              'Verificar si hay defectos visibles en el cable',
              'Solución: Cambiar el cable',
              'Verificar la conexión del cable con el equipo',
              'Solución: Conectar bien el cable',
              'Verificar si el problema está en la entrada del cable al equipo'
            ],
            'Electrodos mal conectados': [
              'Verificar la correcta colocación de los electrodos',
              'Solución: Colocar bien los electrodos',
              'Asegurar que los electrodos tengan buen contacto con la piel',
              'Verificar si se ha depilado la zona de contacto',
              'Solución: Secar los electrodos en caso de que estén húmedos, cambiar los electrodos'
            ],
            'Problema de alimentación eléctrica': [
              'Fusible quemado',
              'Solución: Cambiar fusible quemado',
              'Placa de circuito dañada',
              'Solución: Comuniquese con el soporte técnico del equipo',
              'No hay suministro eléctrico',
              'Solución: Comunicarse con su entidad prestadora de energía'
            ],
            
            // Ventilador Mecánico
            'Batería defectuosa' : [
              'Verifique la batería, conexiones y estado, pruebe el equipo con otra batería',
              'Solución: Cambio de batería'
            ],
            'Problema en sensores de flujo': [
              'Hay problemas en los sensores de flujo de la pieza de aire',
              'Solución: Cambiar los sensores'
            ],
            'Problema de configuración' : [
            'Hay problemas con la conexión al paciente',
            'Solución: Probar cables nuevos con el paciente, verificar la conexión al paciente'
            ],
            'Conexión incorrecta al paciente' : [
            'Hay problemas de configuración',
            'Solución: Verifique que la configuración se ajusta a la necesidad de lo requerido'
            ],
            // Monitor de Signos Vitales
            'Problema con lectura de SpO2': [
              'Verificar que el cable esté bien conectado',
              'Solución: Conectar bien el cable',
              'Solución: Ubicar bien la pinza',
              'Verificar si el paciente tiene elementos externos (como esmalte)',
              'Solución: Retirar o limpiar los elementos externos',
              'Revisar el sensor de SpO2',
              'Verificar la configuración del equipo'
            ],
            'Sensores desconectados o defectuosos': [
              'Verificar la conexión física de todos los sensores',
              'Solución: Reconectar los sensores correctamente',
              'Solución: Reemplazar sensores dañados',
              'Verificar si los cables de los sensores están en buen estado',
              'Solución: Reemplazar cables defectuosos',
            ],
            'Interferencia en las señales': [
              'Verificar si hay equipos electrónicos cerca generando interferencia',
              'Solución: Alejar equipos electrónicos que puedan causar interferencia',
              'Verificar si los electrodos o sensores están correctamente colocados',
              'Solución: Reposicionar electrodos y sensores',
              'Solución: Desenredar y separar los cables'
            ],
            'Configuración incorrecta': [
              'Verificar los rangos de alarma configurados',
              'Solución: Ajustar los rangos de alarma según las necesidades del paciente',
              'Solución: Recalibrar filtros y sensibilidad',
              'Verificar la configuración de los parámetros de monitoreo',
              'Solución: Configurar correctamente los parámetros de monitoreo'
            ],
            
            // Bomba de infusión
            'Aire en las líneas': [
              'Verificar si hay burbujas visibles en las líneas',
              'Solución: Sacar el aire de las líneas',
              'Verificar si el sensor está sucio o dañado',
              'Solución: Limpiar o reemplazar el sensor de burbujas'
            ],
            'Problema mecánico del motor': [
              'No está llegando suficiente energía al motor',
              'Solción: Probar un cable diferente, probar una toma diferente',
              'Fusible dañádo',
              'Solución: Cambiar fusible',
              'Motor en corto',
              'Solución: revisar cables de alimentación, contactar con el ingeniero',
              'Rodamientos desgastados',
              'Solución: Cambiar rodamientos nuevos',
              'Modo de seguridad activado',
              "Solución: Entrar en configuración y desactivar el modo de seguridad"
            ],
            'Bolsa de medicamento vacía o mal conectada': [
              'La bolsa de medicamento no tiene medicamento',
              'Solución: Conectar una bolsa con medicamento',
              'La bolsa esta mal conectada',
              'Solución: Conectar bien la bolsa, conectar otro cable'
            ],
            'Cánula mal posicionada' : [
              'Verificar la conexión de la cánula',
              'Solución: Posicionar y conectar la cánula correctamente'
            ],
            
            // Desfibrilador
            'Electrodos mal conectados': [
              'Comprobar la conexión de los electrodos',
              'Solución: Conectar nuevamente los electrodos, probar con electrodos nuevos'
            ],
            'Palas defectuosas': [
              'Problemas con las palas',
              'Solución: Probar con nuevos cables la conexión de las palas, probar el mismo equipo con otras palas'
            ],
            'Sincronización incorrecta' : [
              'Problema de sincronización',
              'Solución: Entrar a configuración y realizar el proceso de sincronización'
            ],
            'Batería descargada': [
              'Hay un problema con la batería interna del equipo',
              'Solución: Probar una batería diferente, probar la batería en otro equipo'
            ]
          };
          
          // Crear HTML formateado
          let htmlFormateado = '<p><strong>Basado en los síntomas reportados, se han identificado las siguientes posibles fallas:</strong></p>';
          
          // Para cada línea que parece ser una falla
          for (let i = 0; i < lineasDiagnostico.length; i++) {
            const linea = lineasDiagnostico[i].trim();
            if (linea.match(/^\d+\.\s+/)) {
              // Extraer nombre de falla sin el porcentaje
              const nombreFalla = linea.replace(/^\d+\.\s+/, '').replace(/:\s+\d+\.\d+%$/, '');
              const porcentaje = linea.match(/(\d+\.\d+)%$/)?.[0] || '';
              
              htmlFormateado += `<div class="falla-item">`;
              htmlFormateado += `<p class="falla-titulo"><strong>${linea}</strong></p>`;
              
              // Agregar verificaciones específicas para esta falla
              if (verificacionesPorFalla[nombreFalla]) {
                htmlFormateado += `<div class="verificaciones-lista">`;
                htmlFormateado += `<p><strong>Síntomas característicos a verificar:</strong></p>`;
                htmlFormateado += `<ul>`;
                verificacionesPorFalla[nombreFalla].forEach(verificacion => {
                  htmlFormateado += `<li>${verificacion}</li>`;
                });
                htmlFormateado += `</ul>`;
                htmlFormateado += `</div>`;
              }
              
              htmlFormateado += `</div>`;
            }
          }
          
          // Agregar la recomendación principal
          const lineaRecomendacion = lineasDiagnostico.find(l => l.includes('Recomendación principal:'));
          if (lineaRecomendacion) {
            htmlFormateado += `<p class="recomendacion"><strong>${lineaRecomendacion}</strong></p>`;
          }
          
          // Actualizar el contenido
          diagnosticoBox.innerHTML = htmlFormateado;
        } catch (error) {
          console.error('Error al formatear el diagnóstico:', error);
        }
      }
    }
    
    // Ejecutar el formateo del diagnóstico
    formatearDiagnostico();
  });
</script>

<style>
  .container {
    max-width: 960px;
    margin: 0 auto;
    padding: 20px;
  }
  
  .back-link {
    margin-bottom: 20px;
  }
  
  .back-link a {
    text-decoration: none;
    color: #2196f3;
    font-weight: bold;
  }
  
  .diagnostico-header {
    display: flex;
    margin-bottom: 30px;
    background: #f9f9f9;
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
  }
  
  .equipo-image {
    width: 120px;
    height: 120px;
    margin-right: 25px;
    flex-shrink: 0;
  }
  
  .equipo-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 6px;
  }
  
  .diagnostico-info {
    flex-grow: 1;
  }
  
  .diagnostico-info h2 {
    margin-top: 0;
    color: #333;
  }
  
  .card {
    background: white;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 25px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
  }
  
  .card h3 {
    margin-top: 0;
    color: #2196f3;
    border-bottom: 1px solid #eee;
    padding-bottom: 10px;
  }
  
  .diagnostico-box, .notas-box {
    background: #f9f9f9;
    border-radius: 6px;
    padding: 15px;
    margin-top: 10px;
    white-space: pre-wrap;
  }
  
  /* Estilos para la navegación de preguntas */
  .preguntas-nav {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    margin-bottom: 15px;
  }
  
  .btn-pregunta {
    width: 36px;
    height: 36px;
    border-radius: 50%;
    border: 1px solid #ddd;
    background: #f5f5f5;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    font-weight: bold;
    transition: all 0.2s ease;
  }
  
  .btn-pregunta:hover {
    background: #e0e0e0;
  }
  
  .btn-pregunta.active {
    background: #2196f3;
    color: white;
    border-color: #2196f3;
  }
  
  /* Estilos para los contenedores de respuestas */
  .respuestas-container {
    border: 1px solid #eee;
    border-radius: 8px;
    padding: 15px;
    background: #f9f9f9;
    min-height: 150px;
  }
  
  .respuesta-item {
    display: none;
  }
  
  .respuesta-item.active {
    display: block;
  }
  
  /* Estilos para la navegación anterior/siguiente */
  .navegacion-preguntas {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 15px;
  }
  
  #paginaActual {
    font-weight: bold;
    color: #555;
  }
  
  /* Estilos para las fallas y verificaciones */
  .falla-item {
    background: #f0f7ff;
    border-left: 4px solid #2196f3;
    padding: 10px 15px;
    margin-bottom: 15px;
    border-radius: 4px;
  }
  
  .falla-titulo {
    margin-bottom: 10px;
    color: #0d47a1;
  }
  
  .verificaciones-lista {
    background: #ffffff;
    padding: 10px;
    border-radius: 4px;
    margin-left: 10px;
    border: 1px solid #e1e1e1;
  }
  
  .verificaciones-lista ul {
    margin: 5px 0;
    padding-left: 20px;
  }
  
  .verificaciones-lista li {
    margin-bottom: 5px;
  }
  
  .recomendacion {
    background: #e8f5e9;
    padding: 10px 15px;
    border-left: 4px solid #4caf50;
    border-radius: 4px;
    color: #2e7d32;
  }
  
  .actions {
    margin-top: 30px;
    display: flex;
    gap: 15px;
  }
  
  .btn {
    display: inline-block;
    padding: 12px 24px;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-weight: bold;
    text-decoration: none;
    transition: background-color 0.3s;
  }
  
  .btn-primary {
    background-color: #2196f3;
    color: white;
  }
  
  .btn-secondary {
    background-color: #757575;
    color: white;
  }
  
  .btn-sm {
    padding: 6px 12px;
    font-size: 14px;
  }
  
  .btn-outline-secondary {
    background-color: transparent;
    border: 1px solid #757575;
    color: #757575;
  }
  
  .btn-outline-secondary:hover {
    background-color: #f0f0f0;
  }
  
  .btn-outline-secondary:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
  
  .btn:hover {
    opacity: 0.9;
  }
  
  .error-message {
    color: #f44336;
    font-style: italic;
  }
</style>

<%- include('partials/footer') %>